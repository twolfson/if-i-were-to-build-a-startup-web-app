"""
Django settings for project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

ENV = os.environ.get("ENV", "development")
DEVELOPMENT = "development"
TEST = "test"
PRODUCTION = "production"
assert ENV in (DEVELOPMENT, TEST, PRODUCTION)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-secret-key"
assert ENV != PRODUCTION, "Secret key not configured for production"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = ENV == DEVELOPMENT

ALLOWED_HOSTS = []

# Required by django-allauth, https://django-allauth.readthedocs.io/en/latest/installation.html
SITE_ID = 1


# Application definition
# fmt:off
INSTALLED_APPS = [
    "app.apps.AppConfig",

    # Default apps from Django
    "django.contrib.admin",
    # Also required by django-allauth, https://django-allauth.readthedocs.io/en/latest/installation.html
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    # Also required by django-allauth, https://django-allauth.readthedocs.io/en/latest/installation.html
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # Non-default but required by django-allauth, https://django-allauth.readthedocs.io/en/latest/installation.html
    "django.contrib.sites",

    # django-allauth configuration (we're excluding many many many social options)
    "allauth",
    "allauth.account",
    "allauth.socialaccount",

    # Used for render_field
    "widget_tweaks",

    # Used for shell_plus and runserver_plus
    "django_extensions",
]
# fmt:on

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                # Already a default, but explicit callout from django-allauth too, https://django-allauth.readthedocs.io/en/latest/installation.html  # noqa:E501
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]
# In Django 4.2, cached template loading is enabled in all environments (frustrating)
#   This works around that, https://stackoverflow.com/a/75342761
if ENV == DEVELOPMENT:
    assert len(TEMPLATES) == 1, "Encountered unexpected TEMPLATES change"
    assert TEMPLATES[0]["APP_DIRS"], "Encountered unexpected `APP_DIRS` change"
    assert not hasattr(TEMPLATES[0]["OPTIONS"], "loaders"), "Encountered unexpected `loaders` setting"
    del TEMPLATES[0]["APP_DIRS"]
    TEMPLATES[0]["OPTIONS"]["loaders"] = [
        "django.template.loaders.filesystem.Loader",
        "django.template.loaders.app_directories.Loader",
    ]

WSGI_APPLICATION = "project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Authentication
AUTHENTICATION_BACKENDS = [
    # As stated by django-allauth, needed to login by username in Django Admin, https://django-allauth.readthedocs.io/en/latest/installation.html # noqa:E501
    "django.contrib.auth.backends.ModelBackend",
    # Support django-allauth mechanisms, https://django-allauth.readthedocs.io/en/latest/installation.html  # noqa:E501
    "allauth.account.auth_backends.AuthenticationBackend",
]

# Everything ACCOUNT_ is django-allauth, https://django-allauth.readthedocs.io/en/latest/configuration.html
ACCOUNT_ADAPTER = "app.adapter.AccountAdapter"
ACCOUNT_FORMS = {
    "signup": "app.forms.SignupForm",
    "login": "app.forms.LoginForm",
}
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_EMAIL_REQUIRED = True
# DEV: ACCOUNT_EMAIL_VERIFICATION=mandatory does not identify to verify, so instead use convention to enforce
ACCOUNT_EMAIL_VERIFICATION = "optional"
ACCOUNT_USER_DISPLAY = lambda user: user.get_full_name()  # noqa:E731
ACCOUNT_USERNAME_REQUIRED = False  # Use email as username
# Consider logout via a POST form to be YAGNI experience, esp for a small site
ACCOUNT_LOGOUT_ON_GET = True
# Don't preserve casing as it uses `__iexact` which can be expensive,
ACCOUNT_PRESERVE_USERNAME_CASING = False

# Email sending
# DEV: Intentionally invalid email backend to encourage using WYSIWYG email systems instead
#   If you really want to send, see https://docs.djangoproject.com/en/4.2/topics/email/
EMAIL_BACKEND = "invalid-email-backend"

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Auth settings
#   https://docs.djangoproject.com/en/4.2/topics/auth/default/#django.contrib.auth.decorators.login_required
#   https://docs.djangoproject.com/en/4.2/ref/settings/#login-url
# django.contrib.auth and django-allauth standardize on /accounts/login/ but I like it being lower level
LOGIN_URL = "/login/"
